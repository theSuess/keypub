type User {
  id: ID!
  username: String!
  name: String
  keys: [PublicKey!]!
  groups(first: Int): [Group!]!
}

type PublicKey {
  id: ID!
  content: String!
  name: String!
  user: User!
}

type Group {
  id: ID!
  name: String!
  users: [User!]!
  owners: [User!]!
}

input NewUser {
  name: String
  username: String!
}

input NewKey {
  content: String!
  name: String!
  userId: ID!
}

input NewGroup {
  name: String!
}

input JoinGroup {
  userId: ID!
  groupId: ID!
}

type Query {
  users: [User!]!
  user(username: String!): User

  groups: [Group!]!
}

type Mutation {
  createUser(input: NewUser!): User!
  addKey(input: NewKey!): PublicKey!

  createGroup(input: NewGroup!): Group!
  joinGroup(input: JoinGroup!): Group!
}
